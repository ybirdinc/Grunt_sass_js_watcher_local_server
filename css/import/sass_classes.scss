$gutter: 5px;

/* media queries */
@mixin min-dikeyTablet {
  @media (min-width: 768px) {
    @content;
  }
}

@mixin min-yatayTablet {
  @media (min-width: 992px) {
    @content;
  }
}

@mixin max-dikeyTablet {
  @media (max-width: 767px) {
    @content;
  }
}

@mixin max-yatayTablet {
  @media (max-width: 991px) {
    @content;
  }
}

@mixin fontSmooth() {
  font-display           : block;
  font-smooth            : always;
  -webkit-font-smoothing : antialiased;
  -moz-osx-font-smoothing: grayscale;
  -webkit-text-stroke    : 0.45px rgba(0, 0, 0, 0.1);
  text-shadow            : #aaa 0px 1px 1px;

  @-moz-document url-prefix() {
    text-shadow: none !important;
  }
}

@mixin border-radius($gutter) {
  -moz-border-radius   : $gutter;
  -webkit-border-radius: $gutter;
  border-radius        : $gutter;
  overflow             : hidden;
}

@mixin border($side, $specs) {
  border-#{$side}: $specs;
}

@mixin margin($side, $specs) {
  margin-#{$side}: $specs;
}

@mixin padding($side, $specs) {
  padding-#{$side}: $specs;
}

@mixin ellipsis($maxHeight, $lineclamp) {
  line-clamp        : $lineclamp;
  -webkit-line-clamp: $lineclamp;
  box-orient        : vertical;
  -webkit-box-orient: vertical;
  -o-text-overflow  : ellipsis;
  -ms-text-overflow : ellipsis;
  text-overflow     : ellipsis;
  display           : block;
  display           : -webkit-box;
  overflow          : hidden;
  height            : $maxHeight + 0px;
}

@mixin box-shadow($string) {
  -webkit-box-shadow: $string;
  -moz-box-shadow   : $string;
  box-shadow        : $string;
}
@mixin text-shadow($string) {
  -webkit-text-shadow: $string;
  -moz-text-shadow   : $string;
  text-shadow        : $string;
}
@mixin transition($string) {
  @if ($string == '' or $string == null) {
    $string: all 350ms ease-in-out;
  }

  -webkit-transition: $string;
  -moz-transition   : $string;
  -ms-transition    : $string;
  -o-transition     : $string;
  transition        : $string;
}

@mixin transformScale($size, $dir1, $dir2) {
  -webkit-transform       : scale($size);
  -moz-transform          : scale($size);
  -o-transform            : scale($size);
  transform               : scale($size);
  -webkit-transform-origin: $dir1 $dir2;
  -moz-transform-origin   : $dir1 $dir2;
  -o-transform-origin     : $dir1 $dir2;
  transform-origin        : $dir1 $dir2;
}

@mixin fontSettings($size, $weight, $color) {
  @if($size !=''or $size !=null) {
    font-size: $size;
  }

  @if($weight !=''or $weight !=null) {
    font-weight: $weight;
  }

  @if($color !=''or $color !=null) {
    color: $color;
  }
}

@mixin rotate($deg) {
  transform: rotate($deg);
}

@mixin background-gradient($start-color, $end-color, $orientation) {
  background: $start-color;

  @if $orientation==vertical {
    // vertical
    background: -moz-linear-gradient(top, $start-color 0%, $end-color 100%);
    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%, $start-color), color-stop(100%, $end-color));
    background: -webkit-linear-gradient(top, $start-color 0%, $end-color 100%);
    background: -o-linear-gradient(top, $start-color 0%, $end-color 100%);
    background: -ms-linear-gradient(top, $start-color 0%, $end-color 100%);
    background: linear-gradient(to bottom, $start-color 0%, $end-color 100%);
    filter    : progid:DXImageTransform.Microsoft.gradient(startColorstr='$start-color', endColorstr='$end-color', GradientType=0);
  }

  @else if $orientation==horizontal {
    // horizontal
    background: -moz-linear-gradient(left, $start-color 0%, $end-color 100%);
    background: -webkit-gradient(linear, left top, right top, color-stop(0%, $start-color), color-stop(100%, $end-color));
    background: -webkit-linear-gradient(left, $start-color 0%, $end-color 100%);
    background: -o-linear-gradient(left, $start-color 0%, $end-color 100%);
    background: -ms-linear-gradient(left, $start-color 0%, $end-color 100%);
    background: linear-gradient(to right, $start-color 0%, $end-color 100%);
    filter    : progid:DXImageTransform.Microsoft.gradient(startColorstr='$start-color', endColorstr='$end-color', GradientType=1);
  }

  @else if $orientation==radial {
    // radial
    background: -moz-radial-gradient(center, ellipse cover, $start-color 0%, $end-color 100%);
    background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(0%, $start-color), color-stop(100%, $end-color));
    background: -webkit-radial-gradient(center, ellipse cover, $start-color 0%, $end-color 100%);
    background: -o-radial-gradient(center, ellipse cover, $start-color 0%, $end-color 100%);
    background: -ms-radial-gradient(center, ellipse cover, $start-color 0%, $end-color 100%);
    background: radial-gradient(ellipse at center, $start-color 0%, $end-color 100%);
    filter    : progid:DXImageTransform.Microsoft.gradient(startColorstr='$start-color', endColorstr='$end-color', GradientType=1);
  }
}

@mixin opacity($opacity) {
  opacity: $opacity;
  filter : alpha(opacity=($opacity * 100));
}

@mixin column-width ($value: 150px) {
  -webkit-column-width: $value;
  -moz-column-width   : $value;
  column-width        : $value;
}

@mixin center($position) {
  position: absolute;

  @if ($position=='vertical') {
    top              : 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform    : translateY(-50%);
    transform        : translateY(-50%);
  }

  @else if ($position=='horizontal') {
    left             : 50%;
    -webkit-transform: translateX(-50%);
    -ms-transform    : translateX(-50%);
    transform        : translate(-50%);
  }

  @else if ($position=='both') {
    top              : 50%;
    left             : 50%;
    -webkit-transform: translate(-50%, -50%);
    -ms-transform    : translate(-50%, -50%);
    transform        : translate(-50%, -50%);
  }
}

@mixin minWidth($size) {
  @media screen and (min-width: $size) {
    @content;
  }
}

@mixin maxWidth($size) {
  @media screen and (max-width: $size) {
    @content;
  }
}

@mixin minHeight($size) {
  @media screen and (min-height: $size) {
    @content;
  }
}

@mixin maxHeight($size) {
  @media screen and (max-height: $size) {
    @content;
  }
}

@mixin clearfix {
  &:after {
    content: '';
    display: table;
    clear  : both;
  }
}

// Positioning
@mixin position($position, $args) {
  @each $o in top right bottom left {
    $i: index($args, $o);

    @if $i and $i+1 <=length($args) and type-of(nth($args, $i + 1))==number {
      #{$o}: nth($args, $i + 1);
    }
  }

  position: $position;
}

// Positioning helpers
@mixin absolute($args: '') {
  @include position(absolute, $args);
}

@mixin fixed($args: '') {
  @include position(fixed, $args);
}

@mixin relative($args: '') {
  @include position(relative, $args);
}

/*
 Usage
 .menu li {
   @include relative;
 }

.sub-menu {
  @include absolute(top 100% left 0);
}

.sticky-bar {
  @include fixed(top 0 left 0);
}
*/
@mixin calc($property, $expression) {
  #{$property}: -moz-calc(#{$expression});
  #{$property}: -webkit-calc(#{$expression});
  #{$property}: calc(#{$expression});
}

//

// SCSS mixin to convert Photoshop drop shadows to CSS3 box-shadow
// usage: @include dropShadowPStoCSS( 146, 113, 59, 65, 90, 6/4, 0, 32/4 );
/*

Usage:
@include dropShadowPStoCSS( 146, 113, 59, 65, 90, 6/4, 0, 32/4 );

for the following Photoshop settings:
R: 146
G: 113
B: 59
Opacity(%): 65
Angle: 90
Distance (px, @1280px canvas): 6
Spread (%): 6
Size (px, @1280px canvas): 32

*/

@function pow($number, $exp) {
  $value: 1;
  @if $exp > 0 {
    @for $i from 1 through $exp {
      $value: $value * $number;
    }
  }
  @else if $exp < 0 {
    @for $i from 1 through -$exp {
      $value: $value / $number;
    }
  }
  @return $value;
}

@function fact($number) {
  $value: 1;
  @if $number > 0 {
    @for $i from 1 through $number {
      $value: $value * $i;
    }
  }
  @return $value;
}

@function pi() {
  @return 3.14159265359;
}

@function rad($angle) {
  $unit: unit($angle);
  $unitless: $angle / ($angle * 0 + 1);
  // If the angle has 'deg' as unit, convert to radians.
  @if $unit == deg {
    $unitless: $unitless / 180 * pi();
  }
  @return $unitless;
}

@function sin($angle) {
  $sin: 0;
  $angle: rad($angle);
  // Iterate a bunch of times.
  @for $i from 0 through 10 {
    $sin: $sin + pow(-1, $i) * pow($angle, (2 * $i + 1)) / fact(2 * $i + 1);
  }
  @return $sin;
}

@function cos($angle) {
  $cos: 0;
  $angle: rad($angle);
  // Iterate a bunch of times.
  @for $i from 0 through 10 {
    $cos: $cos + pow(-1, $i) * pow($angle, 2 * $i) / fact(2 * $i);
  }
  @return $cos;
}

@mixin dropShadowPStoCSS(
    $ps_red: 0,
    $ps_green: 0,
    $ps_blue: 0,
    $ps_opacity: 75,
    $ps_angle: 120,
    $ps_distance: 5,
    $ps_spread: 0,
    $ps_size: 5
) {
    $css_opacity: ($ps_opacity / 100);
    $css_angle: ((180 - $ps_angle) * pi() / 180 );
    $css_offset_y: (sin($css_angle)*$ps_distance);
    $css_offset_x: (cos($css_angle)*$ps_distance);
    $css_spread_radius: ($ps_size*$ps_spread / 100);
    $css_blur_radius: ($ps_size - $ps_spread);
    @include box-shadow(#{round($css_offset_x)}px #{round($css_offset_y)}px #{round($css_blur_radius)}px #{round($css_spread_radius)}px rgba( $ps_red, $ps_green, $ps_blue, $css_opacity ));
    @media ( min-width: 640px ) {
      @include box-shadow(#{round($css_offset_x*2)}px #{round($css_offset_y*2)}px #{round($css_blur_radius*2)}px #{round($css_spread_radius*2)}px rgba( $ps_red, $ps_green, $ps_blue, $css_opacity ));
    }
    @media ( min-width: 1280px ) {
      @include box-shadow(#{round($css_offset_x*4)}px #{round($css_offset_y*4)}px #{round($css_blur_radius*4)}px #{round($css_spread_radius*4)}px rgba( $ps_red, $ps_green, $ps_blue, $css_opacity ));
    }
}
